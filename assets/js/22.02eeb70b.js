(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{430:function(_,v,e){"use strict";e.r(v);var t=e(0),n=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("从用户发出 URL 请求到页面开始解析的这个过程，就叫做导航。下面将逐一分析。")]),_._v(" "),v("h3",{attrs:{id:"_1-用户输入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-用户输入"}},[_._v("#")]),_._v(" 1.用户输入")]),_._v(" "),v("p",[_._v("当用户在浏览器地址栏输入一个查询关键字的时候，浏览器地址栏会判断输入的关键字是搜索的内容还是\n请求的URL。")]),_._v(" "),v("ul",[v("li",[_._v("如果是搜索内容，地址栏就会使用浏览器默认的搜索引擎，来生成新的带搜索关键字的请求URL。")]),_._v(" "),v("li",[_._v("如果判断输入内容符合URL规则，比如输入的是 "),v("code",[_._v("www.baidu.com")]),_._v("，那么地址栏会根据规则，把这段内容加上协议，合成为完整的URL，如 "),v("code",[_._v("https://www.baidu.com")]),_._v("。")])]),_._v(" "),v("p",[_._v("当用户在地址栏输入内容并按下回车键后，这意味着当前页面即将要被替换成我们请求的页面。\n但是在这个流程之前，浏览器还会给当前页面执行一次 "),v("code",[_._v("beforeunload")]),_._v("事件的机会，"),v("code",[_._v("beforeunload")]),_._v("事件允许当前页面在离开前执行一些收尾工作，如数据清理，还可以询问用户是否要离开当前页面，如当前页面有未完成提交的表单信息，所以用户可以通过 "),v("code",[_._v("beforeunload")]),_._v("事件来取消导航，让浏览器不再执行后面的操作。")]),_._v(" "),v("p",[_._v("如果页面没有监听"),v("code",[_._v("beforeunload")]),_._v("事件或者用户同意执行后续的操作后，浏览器的Tab页会出现转圈加载的图标。")]),_._v(" "),v("h3",{attrs:{id:"_2-浏览器端url请求过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器端url请求过程"}},[_._v("#")]),_._v(" 2.浏览器端URL请求过程")]),_._v(" "),v("p",[_._v("浏览器进程会通过进程间通信（IPC）把URL请求发送至网络进程，网络进程接收到URL请求后，会在这里发起真正的URL请求流程。")]),_._v(" "),v("p",[_._v("请求流程如下：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("DNS域名解析\n（1） 在浏览器DNS缓存中搜索\n（2） 如果浏览器缓存中没有,操作系统会检查本地hosts文件是否有网址映射关系,如果有,则直接调用这个IP地址映射,完成域名解析。\n（3） 如果hosts文件中没有这个映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。\n（4） 如果hosts文件与本地DNS解析器缓存都没有相应的网址映射关系，则会找本地DNS服务器。如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析。此解析具有权威性。\n（5） 如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。\n（6） 如果上述方法都失败，由本地DNS服务器进行迭代查询，先向根域名服务器发出请求，再查二级域，三级域，直到查询到要解析的地址或名字为止，本地DNS服务器收到应答后，先在缓存中存储，然后将结果返回客户机。")])]),_._v(" "),v("li",[v("p",[_._v("请求DNS，得到对应的IP地址。在和服务器建立TCP连接的时候，在"),v("code",[_._v("传输层")]),_._v("需要添加TCP头（源主机ip、目标主机端口、数据包序列号(用来重排数据包)），在"),v("code",[_._v("网络层")]),_._v("添加IP头。而端口的获取，可通过用户输入的URL中可以获取到，默认情况下，没有写端口的话，HTTP协议的默认端口是80，HTTPS的默认端口是443。\n浏览器中还有"),v("strong",[_._v("DNS数据缓存服务")]),_._v("，如果域名已经解析过了，那么浏览器就会缓存解析的结果，下次查询的时候直接使用解析到的ip地址，这样也可以减少一次网络请求。")])]),_._v(" "),v("li",[v("p",[_._v("等待TCP队列。上一步已经把ip地址和端口已经准备好了，但不会立马发起请求。Chrome有个机制，同一个域名下最多只能建立6个TCP连接。如果同一个域名在有10个请求要发出，那么另外四个请求就会进入队列中等待，直至进行中的请求完成，这四个请求才会执行。\n如果同一域名下的请求少于6个，则会立马进入下一步，建立TCP连接。\n（以上描述的是HTTP1的机制，HTTP2提供了多路复用的机制，到时候再补充）")])]),_._v(" "),v("li",[v("p",[_._v("建立TCP连接（三次握手：在建立一个TCP连接时，客户端和服务端总共要发送三次数据包来确认连接的建立）。")]),_._v(" "),v("blockquote",[v("p",[_._v("三次握手：\n（1）发送端首先发送一个带SYN(synchronize)标志的数据包给接收方。\n（2）接收方收到后，回传一个带有SYN/ACK(acknowledegment)标志的数据包表示接收到信息。\n（3）最后发送方再回传一个带有ACK标志的数据包，代表握手结束。")])])]),_._v(" "),v("li",[v("p",[_._v("发送HTTP请求。\n一次完整的TCP的过程包括三个阶段：建立连接阶段(三次握手)-> 数据传输阶段 -> 断开连接阶段（四次挥手）。而HTTP请求阶段就是在TCP的数据传输阶段完成的。\n浏览器端会构建请求行、请求头、请求体（GET请求没有）等信息、并把和该域名相关的Cookie等数据附加到请求头中（如果存在Cookie的话），然后向服务器发送构建的请求信息。")]),_._v(" "),v("blockquote",[v("p",[_._v("四次挥手：\n(1) 第一次挥手是浏览器发送完数据后，发送FIN请求断开链接。\n(2) 第二次挥手是服务器发送ACK表示同意。\n(3) 第三次挥手是服务器发送FIN请求断开链接。\n(4) 第四次挥手是浏览器需要返回ACK表示同意。")])])])]),_._v(" "),v("h3",{attrs:{id:"_3-服务器端处理url请求过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务器端处理url请求过程"}},[_._v("#")]),_._v(" 3.服务器端处理URL请求过程")]),_._v(" "),v("p",[_._v("服务器在接收到请求之后，会根据浏览器的请求信息来准备相应的内容。")]),_._v(" "),v("ul",[v("li",[_._v("返回请求。一旦服务器处理结束，就会返回数据给浏览器。"),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("  通过以下命令可查看浏览器返回的信息\n  curl -i https://www.baidu.com/\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br")])]),_._v("服务器会返回响应行（协议和状态码）、响应头、响应体。响应头包含了服务器的一些自身信息，比如服务器返回数据的时间、返回的数据类型、以及服务器要在客户端保存的Cookie等信息。")]),_._v(" "),v("li",[_._v("断开连接。通常情况下，服务器向浏览器返回了数据，它就要关闭TCP连接。如果浏览器或者服务器在请求头或者响应头中加入了："),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("Connection:Keep-Alive \n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),_._v("那么TCP连接在发送后仍然保持打开的状态，这样浏览器就可以通过同一个TCP连接继续发送请求。这样做的好处是：省去了创建TCP连接的时间，加快了资源请求速度。\n比如一个web页面内嵌的图片都来自同一个站点，如果初始化了一个持久连接，浏览器就能复用该连接，以请求其他资源，不需要再建立新的TCP连接。")])]),_._v(" "),v("h3",{attrs:{id:"_4-浏览器处理服务器返回的数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器处理服务器返回的数据"}},[_._v("#")]),_._v(" 4.浏览器处理服务器返回的数据")]),_._v(" "),v("p",[_._v("当浏览器（具体的是网络进程）接收到服务器返回的数据后，就要开始解析响应头（这里将响应行和响应头统称为响应头）的内容了。")]),_._v(" "),v("ul",[v("li",[_._v("重定向。在接收到服务器返回的响应头之后，网络进程开始解析响应头，如果发现返回的状态码是301或者302，那么说明服务器需要浏览器重定向到其他URL。这时网络进程会从响应头里获取"),v("code",[_._v("Location")]),_._v("字段对应的重定向URL，然后再重新发起请求，重复上面所有的操作。在导航过程中，如果服务器响应行的状态码包含了 301、302 一类的跳转信息，浏览器会跳转到新的地址继续导航；如果响应行是 200，那么表示浏览器可以继续处理该请求。")]),_._v(" "),v("li",[_._v("响应数据类型处理。在处理完跳转信息之后，网络进程继续解析。网络进程会根据响应头中的"),v("code",[_._v("Content-Type")]),_._v("字段的值来判断服务器到底返回的是什么数据类型，然后浏览器会根据"),v("code",[_._v("Content-Type")]),_._v("的值来决定如何显示响应体的内容。\n如果"),v("code",[_._v("Content-Type")]),_._v("的值是"),v("code",[_._v("text/html")]),_._v("，这是告诉浏览器，服务器返回的是HTML格式。\n这种情况，浏览器会继续进行后面的导航流程，接下来就准备进入"),v("strong",[_._v("渲染流程")]),_._v("了。\n如果"),v("code",[_._v("Content-Type")]),_._v("的值是"),v("code",[_._v("application/octet-stream")]),_._v("，这是告诉浏览器，服务器返回的是"),v("strong",[_._v("字节流")]),_._v("类型的文件，通常会交给浏览器的"),v("strong",[_._v("下载管理器")]),_._v("去执行。")]),_._v(" "),v("li",[_._v("准备渲染进程。默认情况下Chrom会为每个页面分配一个渲染进程，但是有些情况是比较特殊的。当打开的页面都是同一站点（same-site）的话，那么这些页面都会运行在同一个渲染进程中。同一站点定义为：根域名加上协议，还包含了根域名下的所有子域名和不同的端口。下面这三个站点都属于同一站点。")])]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("  https://time.geekbang.org\n  https://www.geekbang.org\n  https://www.geekbang.org:8080\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br"),v("span",{staticClass:"line-number"},[_._v("3")]),v("br")])]),v("p",[_._v("Chrome 的默认策略是，每个标签对应一个渲染进程。但如果从一个页面打开了另一个新页面，而新页面和当前页面属于同一站点的话，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫 process-per-site-instance（翻译为每站一个进程）。")]),_._v(" "),v("p",[_._v("渲染进程准备好之后，还不能立马进入文档解析状态，因为此时的文档数据还在网络进程中，还没有提交给渲染进程。")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("提交文档。即浏览器将网络进程接收到的HTML文档提交给渲染进程，具体流程如下：")]),_._v(" "),v("ul",[v("li",[_._v("当浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息")]),_._v(" "),v("li",[_._v("渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”")]),_._v(" "),v("li",[_._v("等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程")]),_._v(" "),v("li",[_._v("浏览器进程在收到”确认提交“的消息后，会更新浏览器界面状态，包括了web安全状态、地址栏的URL、前后后退的历史状态、并更新web界面")])]),_._v(" "),v("p",[_._v("这也就解释了为什么在浏览器的地址栏里面输入了一个地址后，之前的页面没有立马消失，而是要加载一会儿才会更新页面。")]),_._v(" "),v("p",[_._v("到这里，一个完整的导航流程就“走”完了，这之后就要进入渲染阶段了。")])])]),_._v(" "),v("h3",{attrs:{id:"_5-浏览器渲染流程-重中之重"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器渲染流程-重中之重"}},[_._v("#")]),_._v(" 5.浏览器渲染流程(重中之重)")]),_._v(" "),v("p",[_._v("下面将详细的分析浏览器的渲染流程。")]),_._v(" "),v("p",[v("strong",[_._v("构建DOM树")])]),_._v(" "),v("p",[_._v("构建DOM树。浏览器不能直接使用和理解HTML,所以需要将HTML转换为浏览器能够理解的结构-DOM树。\nDOM树是保存在内存中的树状结构，可以通过JS来查询或者修改其内容。\n构建完DOM树，但是DOM节点中每个元素的样式我们还不知道，所以接下来就需要样式计算的环节了。")]),_._v(" "),v("p",[v("strong",[_._v("样式计算")])]),_._v(" "),v("p",[_._v("1.把CSS转换为浏览器能理解的结构。\n当渲染引擎接收到CSS文本的时候，会将CSS转换为浏览器可以理解的结构-styleSheets(样式表)。")]),_._v(" "),v("p",[_._v("2.转换样式表中的属性值，使其标准化。\n比如CSS样式中有"),v("code",[_._v("rem em blue bold")]),_._v("这些值或者单位时，这些值不容易被渲染引擎所理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值，这个过程就是属性值标准化。")]),_._v(" "),v("p",[_._v("3.计算出DOM树中每个节点的具体样式。")]),_._v(" "),v("ul",[v("li",[_._v("首先是 CSS 继承。CSS 继承就是每个 DOM 节点都包含有父节点的样式。")]),_._v(" "),v("li",[_._v("第二个规则是样式层叠。层叠是 CSS 的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。它在 CSS 处于核心地位，CSS 的全称“层叠样式表”正是强调了这一点。")])]),_._v(" "),v("p",[v("strong",[_._v("布局阶段")])]),_._v(" "),v("p",[_._v("1.创建布局树。\nDOM树中有可能有很多不可见的元素，比如head标签，还有使用了"),v("code",[_._v("display: none;")]),_._v("的元素。所以在显示前，渲染引擎还需要额外的构建一棵只包含可见元素的"),v("strong",[_._v("布局树")]),_._v("。")]),_._v(" "),v("p",[_._v("（在源码中没有CSSOM这个词，CSSROM对应的应该是styleSheets， 网上很多提到的渲染树也是很多年前的代码了，早就已经重构，现在叫布局树，和渲染树不太一样）")]),_._v(" "),v("p",[_._v("2.布局计算。\n布局计算就是布局树中节点坐标位置（过程非常复杂）。在执行布局操作的时候，会把布局运算的结果重新写回到布局树中，\n这是布局阶段不合理的地方，因为在布局阶段并没有清晰的将输入内容和输出内容区别出来\n（针对这个问题，Chrome 团队正在重构布局代码，下一代布局系统叫 LayoutNG，试图更清晰地分离输入和输出，从而让新设计的布局算法更加简单）。")]),_._v(" "),v("p",[v("strong",[_._v("分层")])]),_._v(" "),v("p",[_._v("在上一步骤渲染进程生成了布局树后，并不会立马进行绘制。在页面中有很多复杂的效果，比如3D效果、页面滚动、或者使用z-index做z轴排序等，为了更方便的实现这些效果，"),v("strong",[_._v("渲染引擎还需要为特定的节点生成专用的图层，并生成一棵图层树（LayerTree）。")]),_._v(" 在chrome中通过Layers标签查看具体的图层。")]),_._v(" "),v("p",[_._v("通常情况下，"),v("strong",[_._v("并不是每个布局树的节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。")])]),_._v(" "),v("p",[_._v("通常满足以下两点中的任意一点的元素就可以被单独提升为一个图层：")]),_._v(" "),v("p",[_._v("1.拥有层叠上下文属性的元素会被单独提升为一层。\n层叠上下文属性具体可以参考"),v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context",target:"_blank",rel:"noopener noreferrer"}},[_._v("MDN"),v("OutboundLink")],1),_._v("。")]),_._v(" "),v("p",[_._v("2.需要剪裁的地方也会创建图层。\n当文本内容溢出容器的时候，设置 "),v("code",[_._v("overflow: auto")]),_._v("。")]),_._v(" "),v("p",[v("strong",[_._v("图层绘制")])]),_._v(" "),v("p",[_._v("渲染引擎的图层绘制与我们生活中绘制图画的步骤类似，会把一个图层的绘制分成很多个小的"),v("strong",[_._v("绘制指令")]),_._v("（步骤），然后再把这些绘制指令组成一张"),v("strong",[_._v("带绘制列表")]),_._v("，如下图：\n"),v("img",{attrs:{src:"https://github.com/Jehan-Gao/images/raw/master/Images/%E6%B5%8F%E8%A7%88%E5%99%A8/%E5%9B%BE%E5%B1%82%E7%BB%98%E5%88%B6.png",alt:"图层绘制"}}),_._v(" "),v("center",[_._v("（图片来自《浏览器工作原理与实践》）")])],1),_._v(" "),v("p",[_._v("所以，在图层绘制阶段，输出的就是这些带绘制列表。")]),_._v(" "),v("p",[v("strong",[_._v("栅格(raster)操作")])]),_._v(" "),v("p",[_._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的"),v("strong",[_._v("合成线程")]),_._v("来完成的。渲染主线程和合成线程之间的关系如下图：\n"),v("img",{attrs:{src:"https://github.com/Jehan-Gao/images/raw/master/Images/%E6%B5%8F%E8%A7%88%E5%99%A8/%E5%90%88%E6%88%90%E7%BA%BF%E7%A8%8B.png",alt:"合成线程"}}),_._v(" "),v("center",[_._v("（图片来自《浏览器工作原理与实践》）")]),_._v("\n当绘制列表准备好之后，主线程会把绘制列表提交给合成线程去处理。")],1),_._v(" "),v("p",[_._v("通常一个页面很大，用户只能看到其中一部分，我们用户可以把看到的这部分叫做视口。")]),_._v(" "),v("p",[_._v("有些情况下，有的图层可能很大，比如有的页面需要滚动很久才能滚动到底部，但是通过视口，用户只能看到页面很小的一部分，所以在这种情况下，要绘制出所有图层内容的话，开销太大，也没有必要这样去做。")]),_._v(" "),v("p",[_._v("基于这个原因，"),v("strong",[_._v("合成线程会将图层划分为图块（tile）")]),_._v(",这些图块的大小通常是256x256或者512x512, 如下图显示：\n"),v("img",{attrs:{src:"https://github.com/Jehan-Gao/images/raw/master/Images/%E6%B5%8F%E8%A7%88%E5%99%A8/tile.png",alt:"图块"}}),_._v(" "),v("center",[_._v("（图片来自《浏览器工作原理与实践》）")])],1),_._v(" "),v("p",[_._v("然后"),v("strong",[_._v("合成线程会按照视口附近的图块优先来生成位图，实际上生成位图的操作是又栅格化来执行的。栅格化就是将图块转换为位图的过程。")]),_._v(" 而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的，运行方式如下图所示：\n"),v("img",{attrs:{src:"https://github.com/Jehan-Gao/images/raw/master/Images/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%A0%85%E6%A0%BC%E5%8C%96%E7%BA%BF%E7%A8%8B%E6%B1%A0.png",alt:"光栅"}}),_._v(" "),v("center",[_._v("（图片来自《浏览器工作原理与实践》）")])],1),_._v(" "),v("p",[_._v("通常，栅格化过程都会使用GPU（图形处理器）来加速生成，使用GPU生成位图的过程叫快速栅格化或者GPU栅格化，"),v("strong",[_._v("生成的位图保存在GPU内存中。")])]),_._v(" "),v("p",[_._v("GPU又是一个单独的进程，如果栅格化操作使用了GPU,那么最终生成位图的操作是在GPU中完成的，这就涉及到了跨进程操作，如下图：\n"),v("img",{attrs:{src:"https://github.com/Jehan-Gao/images/raw/master/Images/%E6%B5%8F%E8%A7%88%E5%99%A8/GPU%E9%80%9A%E4%BF%A1.png",alt:"GPU线程通信"}}),_._v(" "),v("center",[_._v("（图片来自《浏览器工作原理与实践》）")])],1),_._v(" "),v("p",[_._v("从图中看出，渲染进程把生成图块的指令发送给GPU，然后在GPU中执生成图块的位图，并保存在GPU的内存中。")]),_._v(" "),v("p",[v("strong",[_._v("合成显示")])]),_._v(" "),v("p",[_._v("一旦所有的图块都被光栅化，合成线程就会生成一个绘制图块的命令-“DrawQuad”，然后将该命令提交给浏览器进程。")]),_._v(" "),v("p",[_._v("浏览器进程中有个叫"),v("strong",[_._v("viz")]),_._v("的组件，用来接收合成线程发送过来的DrawQuad命令，然后根据DrawQuad命令，将其页面内容绘制到内存中，最后再将内存显示到屏幕上。\n"),v("img",{attrs:{src:"https://github.com/Jehan-Gao/images/raw/master/Images/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B8%B2%E6%9F%93%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.png",alt:"渲染完成流程"}}),_._v(" "),v("center",[_._v("（图片来自《浏览器工作原理与实践》）")])],1),_._v(" "),v("p",[_._v("到这里，经过这一系列的阶段，编写好的 HTML、CSS、JavaScript 等文件，经过浏览器就会显示出漂亮的页面了。")])])}),[],!1,null,null,null);v.default=n.exports}}]);